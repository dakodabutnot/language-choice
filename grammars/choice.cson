scopeName: 'source.choice'
name: 'Choice'
fileTypes: ['choice']
limitLineLength: false
patterns: [
  {
    name: 'comment'
    match: '[;]$'
  },
  {
    name: 'invalid.illegal'
    match: '[;].*$'
  },
  {
    name: 'comment.line'
    match: '\\/\\/.*$'
  },
  {
    begin: '\\['
    end: '\\]'
    patterns: [{
      include: "$self"
    }]
  },
  {
    name: 'entity.name.function'
    match: '#\\w+'
  },
  {
    match: '(#[:])(\\w+)'
    captures: {
      1: { name: 'entity.name.function' },
      2: { name: 'entity.name.function' },
    }
  },
  {
    name: 'string'
    begin: '"'
    end: '"'
  },
  {
    name: 'keyword'
    match: '->'
  },
  {
    name: 'keyword'
    match: '~>'
  },
  {
    name: 'keyword'
    match: '=>'
  },
  {
    name: 'keyword'
    match: '-then->'
  },
  # Not used anymore
  # {
  #   match: '\\s*(extra\\()(.*)(\\))'
  #   captures: {
  #     1: { name: 'keyword' },
  #     2: { patterns: [{include: '$self'}] },
  #     3: { name: 'keyword' }
  #   }
  # },
  {
    match: '(-)(if|switch)(\\()(.*)(\\))'
    captures: {
      1: { name: 'keyword' },
      2: { name: 'keyword' },
      3: { name: 'keyword' },
      4: { patterns: [{include: '$self'}] },
      5: { name: 'keyword' }
    }
  },
  {
    name: 'constant.character'
    match: '[:~.]'
  },
  {
    name: 'constant.numeric'
    match: '[-+]?[0-9]*\.?[0-9]+'
  },
  {
    name: 'constant.language'
    match: '\\btrue\\b|\\bfalse\\b'
  },
  {
    name: 'invalid.illegal'
    match: '[^~;{]\\r'
  },
  {
    #why doesn't this work
    name: 'invalid.illegal'
    match: '->\\s*.*->\\s*".+"\\s*~\\s*.*[ ]*{'
  }
]
